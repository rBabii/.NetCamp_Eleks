using Auth.Application.Helpers;
using Auth.Application.Helpers.JWT.Auth;
using Auth.Application.Helpers.JWT.EmailVerify;
using Auth.Application.Helpers.JWT.RefreshToken;
using Auth.Application.Helpers.JWT.ResetPassword;
using Auth.Application.Result;
using Auth.Domain.UserAggregste;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;

namespace Auth.Application.UserManagment
{
    public class UserManager
    {
        private readonly IUserRepository _userRepository;
        private readonly PasswordHasher _passwordHasher;
        private readonly RefreshTokenHelper _refreshTokenHelper;
        private readonly AuthTokenHelper _authTokenHelper;
        private readonly ResetPasswordTokenHelper _resetPasswordTokenHelper;
        private readonly EmailVerifyTokenHelper _emailVerifyTokenHelper;

        public UserManager(IUserRepository userRepository,
                            PasswordHasher passwordHasher,
                            RefreshTokenHelper refreshTokenHelper,
                            AuthTokenHelper authTokenHelper,
                            ResetPasswordTokenHelper resetPasswordTokenHelper,
                            EmailVerifyTokenHelper emailVerifyTokenHelper)
        {
            _userRepository = userRepository;
            _passwordHasher = passwordHasher;
            _refreshTokenHelper = refreshTokenHelper;
            _authTokenHelper = authTokenHelper;
            _resetPasswordTokenHelper = resetPasswordTokenHelper;
            _emailVerifyTokenHelper = emailVerifyTokenHelper;
        }

        public AuthentificateResult Authentificate(string email, string password)
        {
            var user = _userRepository.GetByEmail(email);
            if(user == null)
            {
                return new AuthentificateResult(user, new Error($"User with Email:{email} does not exist"));
            }
            var check = _passwordHasher.Check(user.Password, password);

            if (!check.IsVerified)
            {
                return new AuthentificateResult(user, new Error("Invalid Password"));
            }
            return new AuthentificateResult(user);
        }
        public LoginResult LogIn(string email, string password)
        {
            var authResult = Authentificate(email, password);
            if (!authResult.IsValid)
            {
                return new LoginResult("", "", authResult.Error);
            }
            var token = _authTokenHelper.GenerateJWT(authResult.User);
            var refreshToken = _refreshTokenHelper.GenerateJWT();
            authResult.User.RefreshToken = refreshToken;
            _userRepository.AddOrUpdate(authResult.User);

            return new LoginResult(token, refreshToken);
        }
        public LogOutResult LogOut(int userId)
        {
            var user = _userRepository.Get(userId);
            if(user == null)
            {
                return new LogOutResult(new Error("User does not exist to logout."));
            }
            user.RefreshToken = null;
            _userRepository.AddOrUpdate(user);
            return new LogOutResult();
        }
        public LoginResult RefreshJWT(string refreshToken)
        {
            var user = _userRepository.GetByRefreshToken(refreshToken);
            if (user == null)
            {
                return new LoginResult("", "", new Error("Refresh token does not exist."));
            }
            bool isValidRefreshToken = _refreshTokenHelper.Validate(refreshToken);
            if (!isValidRefreshToken)
            {
                return new LoginResult("", "", new Error("Invalid refresh token."));
            }
            var token = _authTokenHelper.GenerateJWT(user);
            var newRefreshToken = _refreshTokenHelper.GenerateJWT();
            user.RefreshToken = newRefreshToken;
            _userRepository.AddOrUpdate(user);
            return new LoginResult(token, newRefreshToken);
        }
        public RegisterResult Register(User user)
        {
            if (user == null)
            {
                return new RegisterResult(user, new Error("Cant register empty user object."));
            }
            if(string.IsNullOrEmpty(user.Email) || string.IsNullOrEmpty(user.UserName) || string.IsNullOrEmpty(user.Password))
            {
                return new RegisterResult(user, new Error("Email, UserName, Password is required."));
            }
            if(user.Id > 0)
            {
                return new RegisterResult(user, new Error("id is Autogenerated field."));
            }

            var serchedUsers = _userRepository.Get().Where(_user => _user.Email == user.Email || _user.UserName == user.UserName || _user.Id == user.Id)?.ToList();
            
            if(serchedUsers != null && serchedUsers.Count > 0)
            {
                return new RegisterResult(user, new Error("User allready exist."));
            }

            user.Password = _passwordHasher.Hash(user.Password);
            var registeredUser = _userRepository.AddOrUpdate(user);
            return new RegisterResult(registeredUser);
        }
        public DeleteUserResult DeleteUser(User user)
        {
            if (user == null || user.Id < 1)
            {
                return new DeleteUserResult(new Error("user is not valid"));
            }
            var deleteResult = _userRepository.Delete(user);
            if (!deleteResult)
            {
                return new DeleteUserResult(new Error("user is not exist."));
            }
            return new DeleteUserResult();
        }
        public GenerateResetPasswordTokenResult GenerateResetPasswordToken(User user)
        {
            if(user == null || user.Id < 1)
            {
                return new GenerateResetPasswordTokenResult("", new Error("user is not valid"));
            }
            var token = _resetPasswordTokenHelper.GenerateJWT(user);
            return new GenerateResetPasswordTokenResult(token);
        }
        public GenerateEmailVerificationTokenResult GenerateEmailVerificationToken(User user)
        {
            if (user == null || user.Id < 1)
            {
                return new GenerateEmailVerificationTokenResult("", new Error("user is not valid"));
            }
            var token = _emailVerifyTokenHelper.GenerateJWT(user);
            return new GenerateEmailVerificationTokenResult(token);
        }
        public ResetPasswordResult ResetPassword(string token, string password)
        {
            var result = _resetPasswordTokenHelper.Validate(token);
            if (result == null)
            {
                return new ResetPasswordResult(new Error("Invalid token."));
            }
            var UserIdClaim = result.Claims.FirstOrDefault(c => c.Properties.FirstOrDefault().Value == JwtRegisteredClaimNames.Sub);
            int UserID = 0;
            if (Int32.TryParse(UserIdClaim.Value, out UserID) && UserID != 0)
            {
                var user = _userRepository.Get(UserID);
                if (user == null)
                {
                    return new ResetPasswordResult(new Error("Reset password failed. User does not exist."));
                }
                user.Password = _passwordHasher.Hash(password);
                _userRepository.AddOrUpdate(user);
                return new ResetPasswordResult();
            }
            return new ResetPasswordResult(new Error("Reset password failed. Invalid User.Id"));
        }
        public VerifyEmailResult VerifyEmail(string token)
        {
            var result = _emailVerifyTokenHelper.Validate(token);
            if(result == null)
            {
                return new VerifyEmailResult(new Error("Invalid token."));
            }
            var UserIdClaim = result.Claims.FirstOrDefault(c => c.Properties.FirstOrDefault().Value == JwtRegisteredClaimNames.Sub);
            int UserID = 0;
            if (Int32.TryParse(UserIdClaim.Value, out UserID) && UserID != 0)
            {
                var user = _userRepository.Get(UserID);
                if(user == null)
                {
                    return new VerifyEmailResult(new Error("Email verification failed. User does not exist."));
                }
                 user.IsVerified = true;
                 _userRepository.AddOrUpdate(user);
                return new VerifyEmailResult();
            }
            return new VerifyEmailResult(new Error("Email verification failed. Invalid User.Id"));
        }
    }
}
