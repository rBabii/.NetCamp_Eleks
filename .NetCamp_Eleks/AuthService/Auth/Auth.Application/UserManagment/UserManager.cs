using Auth.Application.Helpers;
using Auth.Application.Options;
using Auth.Application.Result;
using Auth.Domain.UserAggregste;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace Auth.Application.UserManagment
{
    public class UserManager
    {
        private readonly IUserRepository _userRepository;
        private readonly IOptions<AuthOptions> _authOptions;
        private readonly PasswordHasher _passwordHasher;
        private readonly TokenRefresher _tokenRefresher;
        private readonly RefreshTokenValidator _refreshTokenValidator;

        public UserManager(IUserRepository userRepository,
                            IOptions<AuthOptions> authOptions,
                            PasswordHasher passwordHasher,
                            TokenRefresher tokenRefresher,
                            RefreshTokenValidator refreshTokenValidator)
        {
            _userRepository = userRepository;
            _authOptions = authOptions;
            _passwordHasher = passwordHasher;
            _tokenRefresher = tokenRefresher;
            _refreshTokenValidator = refreshTokenValidator;
        }

        public AuthentificateResult Authentificate(string email, string password)
        {
            var user = _userRepository.GetByEmail(email);
            if(user == null)
            {
                return new AuthentificateResult(user, new Error($"User with Email:{email} does not exist"));
            }
            var check = _passwordHasher.Check(user.Password, password);

            if (!check.IsVerified)
            {
                return new AuthentificateResult(user, new Error("Invalid Password"));
            }
            return new AuthentificateResult(user);
        }
        public string GenerateJWT(User user)
        {
            var authParams = _authOptions.Value;
            var claims = new List<Claim>()
            {
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString())
            };
            foreach (var role in user.Roles)
            {
                claims.Add(new Claim("role", role.Name.ToString()));
            }

            return TokenGenerator.GenerateJWT(
                    authParams.Secret,
                    authParams.Issuer,
                    authParams.Audience,
                    authParams.TokenLifetime,
                    claims);
        }
        public LoginResult LogIn(string email, string password)
        {
            var authResult = Authentificate(email, password);
            if (!authResult.IsValid)
            {
                return new LoginResult("", "", authResult.Error);
            }
            var token = GenerateJWT(authResult.User);
            var refreshToken = _tokenRefresher.GenerateJWT();
            authResult.User.RefreshToken = refreshToken;
            _userRepository.AddOrUpdate(authResult.User);

            return new LoginResult(token, refreshToken);
        }
        public LogOutResult LogOut(int userId)
        {
            var user = _userRepository.Get(userId);
            if(user == null)
            {
                return new LogOutResult(false, new Error($"User does not exist to logout."));
            }
            user.RefreshToken = null;
            _userRepository.AddOrUpdate(user);
            return new LogOutResult(true);
        }
        public LoginResult RefreshJWT(string refreshToken)
        {
            var user = _userRepository.GetByRefreshToken(refreshToken);
            if (user == null)
            {
                return new LoginResult("", "", new Error("Refresh token does not exist."));
            }
            bool isValidRefreshToken = _refreshTokenValidator.Validate(refreshToken);
            if (!isValidRefreshToken)
            {
                return new LoginResult("", "", new Error("Invalid refresh token."));
            }
            var token = GenerateJWT(user);
            var newRefreshToken = _tokenRefresher.GenerateJWT();
            user.RefreshToken = newRefreshToken;
            _userRepository.AddOrUpdate(user);
            return new LoginResult(token, newRefreshToken);
        }
        public RegisterResult Register(User user)
        {
            if (user == null)
            {
                return new RegisterResult(user, new Error("Cant register empty user object."));
            }
            if(string.IsNullOrEmpty(user.Email) || string.IsNullOrEmpty(user.UserName) || string.IsNullOrEmpty(user.Password))
            {
                return new RegisterResult(user, new Error("Email, UserName, Password is required."));
            }
            if(user.Id > 0)
            {
                return new RegisterResult(user, new Error("id is Autogenerated field."));
            }

            var serchedUsers = _userRepository.Get().Where(_user => _user.Email == user.Email || _user.UserName == user.UserName || _user.Id == user.Id)?.ToList();
            
            if(serchedUsers != null && serchedUsers.Count > 0)
            {
                return new RegisterResult(user, new Error("User allready exist."));
            }

            user.Password = _passwordHasher.Hash(user.Password);
            var registeredUser = _userRepository.AddOrUpdate(user);
            return new RegisterResult(registeredUser);
        }
        public bool Delete(User user)
        {
            if (user == null || user.Id < 1 || string.IsNullOrEmpty(user.Email) || string.IsNullOrEmpty(user.UserName))
            {
                return false;
            }
            return _userRepository.Delete(user);
        }
        public string GenerateForgotPasswordToken()
        {
            throw new NotImplementedException();
        }
        public string GenerateEmailVerificationToken()
        {
            throw new NotImplementedException();
        }
        public void ChangeForgotenPassword()
        {
            throw new NotImplementedException();
        }
        public void VerifyEmail()
        {
            throw new NotImplementedException();
        }
    }
}
